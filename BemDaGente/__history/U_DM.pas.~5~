unit U_Dm;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet, Datasnap.DBClient, ACBrMail, ACBrDFe, ACBrNFe,
  ACBrNFeDANFeRLClass, ACBrDANFCeFortesFr, ACBrNFeDANFEClass,
  ACBrNFeDANFeESCPOS, ACBrBase, ACBrPosPrinter, FireDAC.Phys.IBBase,
  FireDAC.Comp.UI;

type
  TDM = class(TDataModule)
    FDQMenu: TFDQuery;
    ConexaoBD: TFDConnection;
    FDQQuery: TFDQuery;
    FDGUIxWaitCursor1: TFDGUIxWaitCursor;
    FDPhysFBDriverLink1: TFDPhysFBDriverLink;
    FDQQuery1: TFDQuery;
    FDQQuery2: TFDQuery;
    FDQQuery3: TFDQuery;
    FDQMenuIDMODULO: TIntegerField;
    FDQMenuITEM: TWideStringField;
    FDQMenuDESCRICAO: TWideStringField;
    FDQMenuNIVELMENU: TWideStringField;
    FDQMenuICONE: TWideStringField;
    FDQMenuNOMEFORM: TWideStringField;
  private
    { Private declarations }
  public
    { Public declarations }
    function FB_ReturnNextCOD_ByGenerator(NomeGenerator: string): Longint;
    function FB_ReturnMAXCOD_ByTabela(Tabela: string): Longint;
  end;

var
  DM: TDM;

implementation

uses
  ACBrDFeSSL, pcnConversaoNFe, ServerController;

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDm }

function TDM.FB_ReturnMAXCOD_ByTabela(Tabela: string): Longint;
var
  SQL: TStringList;
  Qry: TFDQuery;
label
  FIM;
begin
{$I-}


  Result := 0;

  Qry:= TFDQuery.Create(nil);
  Qry.Connection := ConexaoBD;

  SQL := TstringList.Create;
  Result := 0;

  SQL.Add('Select Max(cod_'+Tabela+') as NEWID from '+Tabela);
  Qry.Open(SQL.Text);

  Result := StrToInt(Qry.FieldValues['NEWID']) +1 ;


  SQL.Free;

end;

function TDM.FB_ReturnNextCOD_ByGenerator(NomeGenerator: string): Longint;
var
  SQL: TStringList;
  Qry: TFDQuery;
label
  FIM;
begin
{$I-}

  Qry:= TFDQuery.Create(nil);
  Qry.Connection := ConexaoBD;

  SQL := TstringList.Create;
  Result := 0;

  SQL.Add('SELECT GEN_ID(' + NomeGenerator + ', 1) AS NEWID FROM RDB$DATABASE');
  Qry.Open(SQL.Text);

  Result := StrToInt(Qry.FieldValues['NEWID']);

  if Result <= 0 then
    Result := 0;

FIM:
  SQL.Free;

end;

end.
